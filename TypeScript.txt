***Variables***
----------------
let a:number = 10 
console.log(a)

***Condition in Ts***
---------------------
// let a:number = 9;
// let b:number = 10;

let a:number = 9 , b = 10;


if(a>b){
    console.log("a is greater")
}
else{
    console.log("b is greater")
}

a>b?"true" : "false"

***For loop in TS***
---------------------
for(let i=0 ; i<10 ; i++){
    console.log("The value is : "+i)
}

let arr = [10,20,30,50]
arr.forEach((x)=>{
console.log(x)
});

***functions in TS***
---------------------
function Meet(greeting:String , name:String):String{ <!--Defining a String-->
    return greeting+''+name
}

console.log(Meet("hello ","Shubham"))


***Class in TS***
---------------------
class Parent{
   property : number
    constructor(a:number){
        this.property = a;
    }
    marriage():void{
        console.log("I found a girl for you")
    }
}
class Child extends Parent{
    disp():void{
        console.log("My father property is : "+this.property)
    }
}

var child = new Child(50000);

child.disp();
child.marriage();

***Interface in TS***
---------------------
interface Person{
    name : String;
    display():void
}
interface MyEmp{
    empCode:number;
}
class Employee implements Person, MyEmp{
    name : string;
    empCode:number;


    constructor(name:string , empCode : number){
        this.name = name;
        this.empCode = empCode;
    }
    display(){
        console.log("Heyy!!!")
    }
}


***Decorators in TS***
----------------------
>>> Decorators are thoose which decorate your class by adding some extra features into that class
>>> Decorators can be attached to a class declaration, method, accessor, property, or parameter
>>> Decorators use the form @expression
>>> Kind of Dependency Injection which was already in some frameworks like Spring boot etc..

function canFly(constructorFunction : Function){
    console.log("can fly invoked...")
    constructorFunction.prototype.fly = true;
}

@canFly // decorator : injecting canFly function in Person class
class Person{
    private name:string;


    constructor(name:string){
        this.name = name;
        console.log('***constructior invoked***')
    }
}

console.log('***creating first object of Person type***');
let shubham : Person = new Person("shubham")
console.log(shubham)


console.log('***creating second object of Person type***');
let shubhanshu : Person = new Person("shubhanshu")
console.log(shubhanshu)
